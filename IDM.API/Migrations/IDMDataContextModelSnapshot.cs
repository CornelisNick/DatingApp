// <auto-generated />
using System;
using IDM.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDM.API.Migrations
{
    [DbContext(typeof(IDMDataContext))]
    partial class IDMDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("IDM.API.Models.Issuer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IssuerName")
                        .IsRequired();

                    b.Property<string>("PrivateKey")
                        .IsRequired();

                    b.Property<string>("ProviderId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IssuerName")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.ToTable("Issuers");

                    b.HasData(
                        new
                        {
                            Id = "c1e15789-fcde-41c4-930a-2fd64d20a86c",
                            IssuerName = "Platform issuer",
                            PrivateKey = "My private key",
                            ProviderId = "375c4e43-1917-4247-91e0-924f40036815"
                        },
                        new
                        {
                            Id = "35b66516-f61c-4fad-8881-e32148f1d9e5",
                            IssuerName = "Reseller issuer",
                            PrivateKey = "My private key",
                            ProviderId = "375c4e43-1917-4247-91e0-924f40036815"
                        });
                });

            modelBuilder.Entity("IDM.API.Models.Provider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Params");

                    b.Property<string>("ProviderName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProviderName")
                        .IsUnique();

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = "375c4e43-1917-4247-91e0-924f40036815",
                            Params = "No parms",
                            ProviderName = "Platform"
                        });
                });

            modelBuilder.Entity("IDM.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IssuerId")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "bdc19f3d-e88d-4403-86e8-aa3c7e007c17",
                            IssuerId = "c1e15789-fcde-41c4-930a-2fd64d20a86c",
                            PasswordHash = new byte[] { 124, 27, 129, 105, 198, 152, 64, 139, 212, 16, 63, 137, 229, 153, 76, 3, 192, 0, 238, 117, 159, 114, 140, 177, 124, 31, 206, 112, 210, 193, 76, 176, 12, 100, 71, 229, 171, 64, 63, 130, 57, 41, 227, 76, 139, 131, 212, 214, 251, 47, 125, 77, 6, 247, 228, 142, 102, 133, 73, 35, 30, 245, 51, 109 },
                            PasswordSalt = new byte[] { 255, 145, 53, 247, 195, 215, 159, 144, 133, 56, 4, 12, 1, 60, 219, 38, 249, 58, 231, 190, 205, 120, 93, 146, 2, 148, 205, 198, 251, 191, 133, 243, 194, 233, 184, 61, 198, 177, 36, 70, 138, 240, 47, 18, 124, 223, 252, 245, 106, 42, 248, 21, 202, 100, 155, 119, 113, 252, 192, 95, 31, 80, 33, 208, 94, 235, 145, 157, 201, 206, 99, 136, 31, 100, 100, 93, 72, 146, 57, 224, 30, 204, 73, 31, 149, 113, 205, 144, 86, 197, 25, 219, 221, 139, 148, 193, 57, 160, 105, 172, 232, 132, 132, 69, 159, 83, 164, 105, 48, 86, 70, 85, 252, 72, 13, 86, 0, 249, 215, 55, 126, 110, 133, 90, 128, 131, 213, 12 },
                            Username = "admin"
                        },
                        new
                        {
                            Id = "96c7044f-8b0e-404c-81b0-8019dd0120d6",
                            IssuerId = "35b66516-f61c-4fad-8881-e32148f1d9e5",
                            PasswordHash = new byte[] { 124, 27, 129, 105, 198, 152, 64, 139, 212, 16, 63, 137, 229, 153, 76, 3, 192, 0, 238, 117, 159, 114, 140, 177, 124, 31, 206, 112, 210, 193, 76, 176, 12, 100, 71, 229, 171, 64, 63, 130, 57, 41, 227, 76, 139, 131, 212, 214, 251, 47, 125, 77, 6, 247, 228, 142, 102, 133, 73, 35, 30, 245, 51, 109 },
                            PasswordSalt = new byte[] { 255, 145, 53, 247, 195, 215, 159, 144, 133, 56, 4, 12, 1, 60, 219, 38, 249, 58, 231, 190, 205, 120, 93, 146, 2, 148, 205, 198, 251, 191, 133, 243, 194, 233, 184, 61, 198, 177, 36, 70, 138, 240, 47, 18, 124, 223, 252, 245, 106, 42, 248, 21, 202, 100, 155, 119, 113, 252, 192, 95, 31, 80, 33, 208, 94, 235, 145, 157, 201, 206, 99, 136, 31, 100, 100, 93, 72, 146, 57, 224, 30, 204, 73, 31, 149, 113, 205, 144, 86, 197, 25, 219, 221, 139, 148, 193, 57, 160, 105, 172, 232, 132, 132, 69, 159, 83, 164, 105, 48, 86, 70, 85, 252, 72, 13, 86, 0, 249, 215, 55, 126, 110, 133, 90, 128, 131, 213, 12 },
                            Username = "reseller_admin"
                        },
                        new
                        {
                            Id = "d0cf1d16-0cd8-40a0-9873-10b74d0daa9c",
                            IssuerId = "c1e15789-fcde-41c4-930a-2fd64d20a86c",
                            PasswordHash = new byte[] { 124, 27, 129, 105, 198, 152, 64, 139, 212, 16, 63, 137, 229, 153, 76, 3, 192, 0, 238, 117, 159, 114, 140, 177, 124, 31, 206, 112, 210, 193, 76, 176, 12, 100, 71, 229, 171, 64, 63, 130, 57, 41, 227, 76, 139, 131, 212, 214, 251, 47, 125, 77, 6, 247, 228, 142, 102, 133, 73, 35, 30, 245, 51, 109 },
                            PasswordSalt = new byte[] { 255, 145, 53, 247, 195, 215, 159, 144, 133, 56, 4, 12, 1, 60, 219, 38, 249, 58, 231, 190, 205, 120, 93, 146, 2, 148, 205, 198, 251, 191, 133, 243, 194, 233, 184, 61, 198, 177, 36, 70, 138, 240, 47, 18, 124, 223, 252, 245, 106, 42, 248, 21, 202, 100, 155, 119, 113, 252, 192, 95, 31, 80, 33, 208, 94, 235, 145, 157, 201, 206, 99, 136, 31, 100, 100, 93, 72, 146, 57, 224, 30, 204, 73, 31, 149, 113, 205, 144, 86, 197, 25, 219, 221, 139, 148, 193, 57, 160, 105, 172, 232, 132, 132, 69, 159, 83, 164, 105, 48, 86, 70, 85, 252, 72, 13, 86, 0, 249, 215, 55, 126, 110, 133, 90, 128, 131, 213, 12 },
                            Username = "user1"
                        },
                        new
                        {
                            Id = "9bd58c40-ab1b-4dc1-9be7-27015ce669ce",
                            IssuerId = "35b66516-f61c-4fad-8881-e32148f1d9e5",
                            PasswordHash = new byte[] { 124, 27, 129, 105, 198, 152, 64, 139, 212, 16, 63, 137, 229, 153, 76, 3, 192, 0, 238, 117, 159, 114, 140, 177, 124, 31, 206, 112, 210, 193, 76, 176, 12, 100, 71, 229, 171, 64, 63, 130, 57, 41, 227, 76, 139, 131, 212, 214, 251, 47, 125, 77, 6, 247, 228, 142, 102, 133, 73, 35, 30, 245, 51, 109 },
                            PasswordSalt = new byte[] { 255, 145, 53, 247, 195, 215, 159, 144, 133, 56, 4, 12, 1, 60, 219, 38, 249, 58, 231, 190, 205, 120, 93, 146, 2, 148, 205, 198, 251, 191, 133, 243, 194, 233, 184, 61, 198, 177, 36, 70, 138, 240, 47, 18, 124, 223, 252, 245, 106, 42, 248, 21, 202, 100, 155, 119, 113, 252, 192, 95, 31, 80, 33, 208, 94, 235, 145, 157, 201, 206, 99, 136, 31, 100, 100, 93, 72, 146, 57, 224, 30, 204, 73, 31, 149, 113, 205, 144, 86, 197, 25, 219, 221, 139, 148, 193, 57, 160, 105, 172, 232, 132, 132, 69, 159, 83, 164, 105, 48, 86, 70, 85, 252, 72, 13, 86, 0, 249, 215, 55, 126, 110, 133, 90, 128, 131, 213, 12 },
                            Username = "reseller_user1"
                        });
                });

            modelBuilder.Entity("IDM.API.Models.Issuer", b =>
                {
                    b.HasOne("IDM.API.Models.Provider")
                        .WithMany("Issuers")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDM.API.Models.User", b =>
                {
                    b.HasOne("IDM.API.Models.Issuer")
                        .WithMany("Users")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
